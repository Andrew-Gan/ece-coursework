Things to implement:
  i. A system driver - files allowing communication between OS and hardware
 ii. newfs - function called to format disk
iii. common lib-c style file IO functions
- lib-c is c library standards?
- read from disk when os starts and write to disk when os shuts
 iv. multi-level directory support

>File system is  a set of contiguous bytes. filesystem breaks both the files and the disk up into blocks (analogous to virtual
pages and physical pages), and keeps a table (similar to a page table) that translates the virtual block number of a file to a
block on disk (or a block in the file system, this subtlety in terms will become clear soon).

>Inode is the same as page table
NOTE: used for translating virtual to FS page num instead of physical page num

>One important point to note is that the physical disk is only able to read or write exactly one physical block at a time. This means that if a program wants to overwrite 4 bytes in a file, and the physical block size is 512 bytes, the file system first has to read the existing 512 bytes from the disk, change the 4 bytes in the copy of the block in memory, then write the entire 512 bytes back to the disk. 

>Disk functions vs. DFS functions vs. DfsInode functions vs. File functions

>if the size is 16 MB 2 ^10 * 16 and file system size is 1024 KB, then we will have 2 ^10 * 16 / 1024 = 16384 file systems block number

> we won't be booting from disk, we will write all zeros to physical block 0.

physical vs fs vs virtual block
block type      |   physical                     |   file-system                           |  virtual
description     |   actual bytes stored on disk  |   representation of physical blocks     |  bytes represented in virtual mem
identification  |   physical block num           |   file-system block num                 |  virtual block num
location        |   disk                         |   ???                                   |  virtual mem
size            |   512 B                        |   multiple of 512 B                     |  512 B
usage           |   i. for reading from disk     |   i. blocksize can be formatted         |  i. used by inode functions
                |  ii. and writing to disk       |  ii. diff in physical and FS blocksize  | ii. virtual block num can be translated to file-system
                | iii. block 0 stores OS boot    |      accounted for in read/write ops    |  block num using using inode as translation table
                |  iv. block 1 stores superblock | iii. first few blocks for OS and super  |
                |                                |  iv. after that are inodes              |

How to determine number of blocks used for each component of DFS
This is for file system blocksize of 1024 B, max inode of 128, inode size of 128 B
* NOTE: inode structs are 96 B for this lab
    Block 0: master boot record and superblock.                 -> I'm guessing this is fixed, similar to loading OS to first few physical pages
    Blocks 1 to 16, inclusive: array of inode structures.       -> numblocks = numInodes * inodeSize / FS blocksize
    Blocks 17 to 18, inclusive: free block vector               -> bitmap of file system block, numblocks = (physical_disk_size / file_sys_blocksize) / (file_sys_blocksize * 8) *rounded to next value
    Blocks 19 to 16383, inclusive: data blocks                  -> remaining blocks, entire DFS consists of 2^14 * file_sys_blocksize = 16 MB

>when the operating system starts, the DFS driver should load the superblock, all inodes, and the free block vector into structures in memory. It should then mark the superblock on the disk as invalid. When the operating system exits, it should write all the inodes and the free block vector back to the disk, and then write the superblock back to the disk marked as valid. If the system crashes before writing the file system information back to the disk, then the file system is considered corrupted. 

IMPORTANT!
> DFS inode structure must be exactly 96 bytes large 
For this lab, the maximum value of DFS block size is 1024 bytes and that of the disk block is 512 bytes. The maximum physical disk size is 16MB.

assumption: filename stored in inode

>keeping the first 10 translations in this table makes the address translation faster for most files
inode only contains blocktable for 10 filesystem blocks (i suppose 10 fs blocks are initially allocated for newly created files)
if file grows beyond 10 virtual pages, allocate new fs block to store additional inode blocktable entries

Directory:
>Each directory entry should be 76 bytes wide. The first 72 bytes will contain the filename and the final four bytes will contain the inode number corresponding to the file. This means that a filename can be at most 72 bytes long. If the
>filename is less than 72 bytes, it should be null terminated (using '\0' ).

IMPORTANT: the name of this Linux file is #define-d in include/os/disk.h. You must change this name before the simulator will work. Your file system file must reside in the /tmp directory, and must be named ee469gXX.img, where "XX" is your group number.

Questions start here:
where is filsystem stored?  
Probably in disk 
> DFS operations include opening the file system (i.e. loading it into memory), closing the file system (i.e. writing it back to the disk)
File system does not change so it has be stored in non-volatile mem

valid indicator for the file system is it a flag? what is it's purpose
I guess, it's a flag for superblock so we can mark it as invalid after the operating system is booted.
Valid bit indicates that most up to date superblock data has been written back to disk (and os is shut down)

It says that a file is not allowed to grow larger than is supported by the maximum number of entries in both the direct and indirect tables. Then what is the maximum number of entries for indirect tables.
thoughts:
lab step 1 indicates only one fs block allocated to hold indirect addr translation as needed
if one fs block is 1024 B, and each addr (like PTE) is 32-bit, then you can have 1024 / 4 = 256 entries

Where are file system blocks stored? Or is it just an abstraction for physical blocks read from mem?
Is it like OS where we allocate the first few physical blocks to hold the file system?

Does inode translation of virtual block num to fs block num follow the same steps as pagetable in paging?
If so, is the valid indicator same as the valid bit that is set if a virtual block is allocated a fs block?
